# Subgraph Schema: NFT Marketplace

enum Network {
  MAINNET # Ethereum Mainnet
}

enum NftStandard {
  ERC721
  ERC1155
  UNKNOWN
}

enum SaleStrategy {
  STANDARD_SALE

  ANY_ITEM_FROM_COLLECTION

  ANY_ITEM_FROM_SET

  DUTCH_AUCTION

  PRIVATE_SALE
}

type Marketplace @entity {
  #Smart contract address of the protocol's main contract
  id: ID!

  #Name of the NFT marketplace, in this case OpenSea
  name: String!

  #Slug of the NFT marketplace
  slug: String!

  #The blockchain network that subgraph indexes
  network: Network!

  #Number of collections listed on the marketplace
  collectionCount: Int!

  #Trade count of the all collections on the marketplace
  tradeCount: Int!

  #Cumulative trade volume (in ETH)
  cumulativeTradeVolumeETH: BigDecimal!

  #Protocol Fee
  marketplaceRevenueETH: BigDecimal!

  #Royalty fee
  creatorRevenueETH: BigDecimal!

  #Total fee
  totalRevenueETH: BigDecimal!

  #Cumulative unique traders
  cumulativeUniqueTraders: Int!
}

type Collection @entity {
  #Contract address
  id: ID!

  #Collection name
  name: String

  #Collection symbol
  symbol: String

  #Total supply of the collection
  totalSupply: BigInt

  #NFT Standard of collection
  nftStandard: NftStandard!

  #Royalty fee rate in percentage
  royaltyFee: BigDecimal!

  #Cumulative trade volume (in ETH)
  cumulativeTradeVolumeETH: BigDecimal!

  " Revenue that goes to the marketplace protocol, aka protocol fee. "
  marketplaceRevenueETH: BigDecimal!

  " Revenue that goes to creator, aka royalty fee. "
  creatorRevenueETH: BigDecimal!

  " Sum of marketplaceRevenue and creatorRevenue. "
  totalRevenueETH: BigDecimal!

  " Trade count of the collection on the marketplace. "
  tradeCount: Int!

  " Buyer count. "
  buyerCount: Int!

  " Seller count. "
  sellerCount: Int!

  " Trades of the collection. "
  trades: [Trade!]! @derivedFrom(field: "collection")
}

" Trades exist such as a combination of taker/order and bid/ask. "
type Trade @entity {
  " { Transaction hash }-{ Log index }-{ (optional) ID within bundle } "
  id: ID!

  " Event transaction hash. "
  transactionHash: String!

  " Event log index. "
  logIndex: Int

  " Block timestamp where the trade is executed. "
  timestamp: BigInt!

  " Block number where the trade is executed. "
  blockNumber: BigInt!

  " Whether the trade is in a bundle. "
  isBundle: Boolean!

  " Collection involved "
  collection: Collection!

  " Token ID of the traded NFT. "
  tokenId: BigInt!

  " The amount of token to transfer. It is set at 1 except for ERC1155 batch. "
  amount: BigInt!

  " Price (in ETH). If only 1 tokenId is involved, then the price is determined by the token only. If the trade is incurred by a batch purchasing (available in x2y2), then the price is the average price in the batch. "
  priceETH: BigDecimal!

  " Stretegy that the trade is executed. "
  strategy: SaleStrategy!

  " Buyer account address "
  buyer: String!

  " Seller account address "
  seller: String!
}

type MarketplaceDailySnapshot @entity {
  " { Contract address }-{# of days since Unix epoch time} "
  id: ID!

  " The marketplace that this snapshot belongs to. "
  marketplace: Marketplace!

  " Block number where the snapshot is taken. "
  blockNumber: BigInt!

  " Block timestamp when the snapshot is taken. "
  timestamp: BigInt!

  " Number of collections listed on the marketplace. "
  collectionCount: Int!

  " Cumulative trade volume (in ETH) "
  cumulativeTradeVolumeETH: BigDecimal!

  " Revenue that goes to the marketplace protocol, aka protocol fee. "
  marketplaceRevenueETH: BigDecimal!

  " Revenue that goes to creator, aka royalty fee. "
  creatorRevenueETH: BigDecimal!

  " Sum of marketplaceRevenueETH and creatorRevenueETH. "
  totalRevenueETH: BigDecimal!

  " Trade count of the all collections on the marketplace. "
  tradeCount: Int!

  " Cumulative unique traders "
  cumulativeUniqueTraders: Int!

  " Daily active traders "
  dailyActiveTraders: Int!

  " Number of traded collections of the day "
  dailyTradedCollectionCount: Int!

  " Number of traded items of the day "
  dailyTradedItemCount: Int!
}

type CollectionDailySnapshot @entity {
  " { Contract address }-{# of days since epoch unix time } "
  id: ID!

  " The collection that this snapshot belongs to. "
  collection: Collection!

  " Block number where the snapshot is taken. "
  blockNumber: BigInt!

  " Block timestamp when the snapshot is taken. "
  timestamp: BigInt!

  " Royalty fee rate in percentage. E.g. 2.5% should be 2.5 "
  royaltyFee: BigDecimal!

  " Minimum sale price of the day (in ETH) "
  dailyMinSalePrice: BigDecimal!

  " Maximum sale price of the day (in ETH) "
  dailyMaxSalePrice: BigDecimal!

  " Cumulative trade volume (in ETH) "
  cumulativeTradeVolumeETH: BigDecimal!

  " Daily trade volume (in ETH) "
  dailyTradeVolumeETH: BigDecimal!

  " Revenue that goes to the marketplace protocol, aka protocol fee. "
  marketplaceRevenueETH: BigDecimal!

  " Revenue that goes to creator, aka royalty fee. "
  creatorRevenueETH: BigDecimal!

  " Sum of marketplaceRevenue and creatorRevenue. "
  totalRevenueETH: BigDecimal!

  " Trade count of the collection on the marketplace. "
  tradeCount: Int!

  " Number of traded items of the day "
  dailyTradedItemCount: Int!
}

" A helper utility entity that works as a set for deduplication purpose. "
type _Item @entity {
  # MARKETPLACE_ACCOUNT-{ Account }
  # COLLECTION_ACCOUNT-{ Buyer/Seller }-{ Collection ID }-{ Account }
  id: ID!
}

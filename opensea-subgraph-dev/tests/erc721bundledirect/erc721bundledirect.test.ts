///// Bundled ERC721 direct sale
import { assert, createMockedFunction, clearStore, test, newMockEvent, newMockCall, countEntities, mockIpfsFile, beforeAll, describe, afterEach, afterAll, logStore } from "matchstick-as/assembly/index"
import { Address, BigInt, Bytes, ethereum, store, Value, ipfs } from "@graphprotocol/graph-ts"

import { AtomicMatch_Call__Inputs, AtomicMatch_Call } from "../../generated/OpenSea/OpenSea"
import { handleAtomicMatch } from "../../src/mappings"
import { ByteArray } from '../../node_modules/@graphprotocol/graph-ts/common/collections';
import { typeConversion } from '../../node_modules/@graphprotocol/graph-ts/common/conversion';
import { ERC721_INTERFACE_IDENTIFIER, NftStandard, SaleKind } from "../../src/constants";
import { Asset, Collection, Trade, User } from "../../generated/schema";

const addrs: Array<Address> = [
    Address.fromString("0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b"),
    Address.fromString("0x34Db5dB7E1550849560d34327A5b83BF8086da27"),
    Address.fromString("0xc78652Eae0b73256F0598ddDA47B6814B23a8D8F"),
    Address.fromString("0x0000000000000000000000000000000000000000"),
    Address.fromString("0xC99f70bFD82fb7c8f8191fdfbFB735606b15e5c5"),
    Address.fromString("0x0000000000000000000000000000000000000000"),
    Address.fromString("0x0000000000000000000000000000000000000000"),
    Address.fromString("0x7Be8076f4EA4A4AD08075C2508e481d6C946D12b"),
    Address.fromString("0xc78652Eae0b73256F0598ddDA47B6814B23a8D8F"),
    Address.fromString("0x0000000000000000000000000000000000000000"),
    Address.fromString("0x5b3256965e7C3cF26E11FCAf296DfC8807C01073"),
    Address.fromString("0xC99f70bFD82fb7c8f8191fdfbFB735606b15e5c5"),
    Address.fromString("0x0000000000000000000000000000000000000000"),
    Address.fromString("0x0000000000000000000000000000000000000000")]


const uints: Array<BigInt> = [
    BigInt.fromI32(250), BigInt.fromI32(0), BigInt.fromI32(0), BigInt.fromI32(0), BigInt.fromI64(100000000000000000), BigInt.fromI32(0),
    BigInt.fromI32(1603044751), BigInt.fromI32(0), BigInt.fromI64(80094432556810223724595447469212453115957024776763979410478072158145502773873),
    BigInt.fromI32(250), BigInt.fromI32(0), BigInt.fromI32(0), BigInt.fromI32(0), BigInt.fromI64(100000000000000000), BigInt.fromI64(0),
    BigInt.fromI32(1603044490), BigInt.fromI32(0), BigInt.fromI64(27387932824816654402197373003732762724999872754944909950640557378086545100666)
]

const feeMethodsSidesKindsHowToCalls: Array<i32> = [1, 0, 0, 1, 1, 1, 0, 1]


const calldataBuy: Bytes = Bytes.fromHexString("0x68f0bcaa000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000027b4bc90fbe56f02ef50f2e2f79d7813aa8941a700000000000000000000000027b4bc90fbe56f02ef50f2e2f79d7813aa8941a700000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000000c823b872dd000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034db5db7e1550849560d34327a5b83bf8086da270000000000000000000000000000000000000000000000000000000000009e9e23b872dd000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034db5db7e1550849560d34327a5b83bf8086da2700000000000000000000000000000000000000000000000000000000000021a1000000000000000000000000000000000000000000000000")
const calldataSell: Bytes = Bytes.fromHexString("0x68f0bcaa000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000027b4bc90fbe56f02ef50f2e2f79d7813aa8941a700000000000000000000000027b4bc90fbe56f02ef50f2e2f79d7813aa8941a700000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000000c823b872dd000000000000000000000000c78652eae0b73256f0598ddda47b6814b23a8d8f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009e9e23b872dd000000000000000000000000c78652eae0b73256f0598ddda47b6814b23a8d8f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000021a1000000000000000000000000000000000000000000000000")
const replacementPatternBuy: Bytes = Bytes.fromHexString("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")
const replacementPatternSell: Bytes = Bytes.fromHexString("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")
const staticExtradataBuy: Bytes = Bytes.fromHexString("")
const staticExtradataSell: Bytes = Bytes.fromHexString("")
const vs: Array<i32> = [28, 28]
const rssMetadata: Array<Bytes> = [
    Bytes.fromHexString("0x06e88983a69b369c579d424bdb1e257e91aed5fed76a9eeaa05132875b29c944"),
    Bytes.fromHexString("0x562ef70bdb1a19e15b1b4ff59b5e6ef6515c126bb26833fba37b408e6f740341"),
    Bytes.fromHexString("0x06e88983a69b369c579d424bdb1e257e91aed5fed76a9eeaa05132875b29c944"),
    Bytes.fromHexString("0x562ef70bdb1a19e15b1b4ff59b5e6ef6515c126bb26833fba37b408e6f740341"),
    Bytes.fromHexString("0x0000000000000000000000000000000000000000000000000000000000000000")
]


test("Can save transaction from call handler", () => {
    let call = changetype<AtomicMatch_Call>(newMockCall())

    let contractAddress = Address.fromString('0x27b4bC90fBE56f02Ef50f2E2f79D7813Aa8941A7')
    createMockedFunction(contractAddress, 'supportsInterface', 'supportsInterface(bytes4):(bool)')
        .withArgs([ethereum.Value.fromFixedBytes(Bytes.fromHexString(ERC721_INTERFACE_IDENTIFIER))])
        .returns([ethereum.Value.fromBoolean(true)])

    createMockedFunction(contractAddress, 'tokenURI', 'tokenURI(uint256):(string)')
        .withArgs([ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(40606))])
        .returns([ethereum.Value.fromString("pass")])

    createMockedFunction(contractAddress, 'tokenURI', 'tokenURI(uint256):(string)')
        .withArgs([ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(8609))])
        .returns([ethereum.Value.fromString("pass")])

    createMockedFunction(contractAddress, 'name', 'name():(string)')
        .returns([ethereum.Value.fromString("pass")])

    createMockedFunction(contractAddress, 'symbol', 'symbol():(string)')
        .returns([ethereum.Value.fromString("pass")])

    createMockedFunction(contractAddress, 'totalSupply', 'totalSupply():(uint256)')
        .returns([ethereum.Value.fromUnsignedBigInt(BigInt.fromString('1234'))])


    call.inputValues = [new ethereum.EventParam("addrs", ethereum.Value.fromAddressArray(addrs)),
    new ethereum.EventParam("uints", ethereum.Value.fromUnsignedBigIntArray(uints)),
    new ethereum.EventParam("feeMethodsSidesKindsHowToCalls", ethereum.Value.fromI32Array(feeMethodsSidesKindsHowToCalls)),
    new ethereum.EventParam("calldataBuy", ethereum.Value.fromBytes(calldataBuy)),
    new ethereum.EventParam("calldataSell", ethereum.Value.fromBytes(calldataSell)),
    new ethereum.EventParam("replacementPatternBuy", ethereum.Value.fromBytes(replacementPatternBuy)),
    new ethereum.EventParam("replacementPatternSell", ethereum.Value.fromBytes(replacementPatternSell)),
    new ethereum.EventParam("staticExtradataBuy", ethereum.Value.fromBytes(staticExtradataBuy)),
    new ethereum.EventParam("staticExtradataSell", ethereum.Value.fromBytes(staticExtradataSell)),
    new ethereum.EventParam("vs", ethereum.Value.fromI32Array(vs)),
    new ethereum.EventParam("rssMetadata", ethereum.Value.fromBytesArray(rssMetadata))
    ]
    handleAtomicMatch(call)

    let buyer = User.load("0x34Db5dB7E1550849560d34327A5b83BF8086da27".toLowerCase())!;

    assert.assertTrue(buyer.assets.length == 2)
    assert.assertTrue(buyer.purchases.length == 2)

    let seller = User.load("0xc78652Eae0b73256F0598ddDA47B6814B23a8D8F".toLowerCase())!;

    assert.assertTrue(seller.sales.length == 2);

    let asset = Asset.load(buyer.assets[0])!;
    let trade = Trade.load(seller.sales[0])!;

    assert.assertTrue(asset.id == trade.asset);
    assert.assertTrue(asset.tokenId == BigInt.fromI64(40606));
    assert.assertTrue(asset.tokenURI == "pass");
    assert.assertTrue(trade.saleKind == SaleKind.DIRECT_PURCHASE);

    let collection = Collection.load(asset.collection)!;
    assert.assertTrue(collection.nftStandard == NftStandard.ERC721);
    assert.assertTrue(collection.id == asset.collection);
})

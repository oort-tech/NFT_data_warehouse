# Subgraph Schema: NFT Marketplace
# Version: 1.0.0

enum NftStandard {
  ERC721
  ERC1155
  UNKNOWN
}

enum SaleStrategy {
  " Strategy that executes an order at a fixed price that can be taken either by a bid or an ask. "
  STANDARD_SALE

  " Strategy that executes an order at a fixed price that can be matched by any tokenId for the collection. "
  ANY_ITEM_FROM_COLLECTION

  " Strategy that executes an order at a fixed price that can be matched by any tokenId in a set of tokenIds. "
  ANY_ITEM_FROM_SET

  " Strategy to launch a Dutch Auction for a token where the price decreases linearly until a specified timestamp and end price defined by the seller. "
  DUTCH_AUCTION

  " Strategy to set up an order that can only be executed by a specific address. "
  PRIVATE_SALE
}

type Collection @entity {
  " Contract address. "
  id: ID!

  " Collection name, mirrored from the smart contract. Leave null if not available. "
  name: String

  " Collection symbol, mirrored from the smart contract. Leave null if not available. "
  symbol: String

  " Total supply of the collection, mirrored from the smart contract. "
  totalSupply: BigInt

  " NFT Standard the collection uses. "
  nftStandard: NftStandard!

  " Royalty fee rate in percentage. E.g. 2.5% should be 2.5 "
  royaltyFee: BigDecimal!

  " Cumulative trade volume (in ETH) "
  cumulativeTradeVolumeETH: BigDecimal!

  " Revenue that goes to the marketplace protocol, aka protocol fee. "
  marketplaceRevenueETH: BigDecimal!

  " Revenue that goes to creator, aka royalty fee. "
  creatorRevenueETH: BigDecimal!

  " Sum of marketplaceRevenue and creatorRevenue. "
  totalRevenueETH: BigDecimal!

  " Trade count of the collection on the marketplace. "
  tradeCount: Int!

  " Buyer count. "
  buyerCount: Int!

  " Seller count. "
  sellerCount: Int!

  " Discovered assets of the collection "
  assets: [Asset!]! @derivedFrom(field: "collection")
}

type Asset @entity {

    " { collection contract address } - { token id } "
    id: ID!
    
    " id of the token in the collection "
    tokenId: BigInt!

    " token URL for this asset "
    tokenURI: String!

    "collection of where this id belongs to"
    collection: Collection!

}

" Trades exist such as a combination of taker/order and bid/ask. "
type Trade @entity {
  " { Transaction hash }-{ Log index }-{ (optional) ID within bundle } "
  id: ID!

  " Event transaction hash. "
  transactionHash: String!

  " Event log index. "
  logIndex: Int

  " Block timestamp where the trade is executed. "
  timestamp: BigInt!

  " Block number where the trade is executed. "
  blockNumber: BigInt!

  " Whether the trade is in a bundle. "
  isBundle: Boolean!

  " The amount of token to transfer. It is set at 1 except for ERC1155 batch. "
  amount: BigInt!

  " Price (in ETH). If only 1 tokenId is involved, then the price is determined by the token only. If the trade is incurred by a batch purchasing (available in x2y2), then the price is the average price in the batch. "
  priceETH: BigDecimal!

  " Stretegy that the trade is executed. "
  strategy: SaleStrategy!

  " Buyer account address "
  buyer: String!

  " Seller account address "
  seller: String!

  " Asset Involved. "
  asset: Asset!
}
